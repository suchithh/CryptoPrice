"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[813],{1310:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var t=a(8168),i=(a(6540),a(5680));const r={id:"challenges",title:"Challenges & Solutions",sidebar_position:3},l="Challenges & Solutions",s={unversionedId:"challenges",id:"challenges",isDocsHomePage:!1,title:"Challenges & Solutions",description:"UI Components & Design Decisions",source:"@site/docs/challenges.md",sourceDirName:".",slug:"/challenges",permalink:"/CryptoPrice/docs/challenges",editUrl:"https://github.com/suchithh/CryptoPrice/docs/challenges.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"challenges",title:"Challenges & Solutions",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Technology Stack",permalink:"/CryptoPrice/docs/technology"}},o=[{value:"UI Components &amp; Design Decisions",id:"ui-components--design-decisions",children:[{value:"Component Structure",id:"component-structure",children:[]},{value:"Responsive Design and Mobile Support",id:"responsive-design-and-mobile-support",children:[]},{value:"Theme Support",id:"theme-support",children:[]},{value:"Performance Considerations",id:"performance-considerations",children:[]}]},{value:"Core Challenges &amp; Solutions",id:"core-challenges--solutions",children:[{value:"API Rate Limiting",id:"api-rate-limiting",children:[]},{value:"Data Freshness vs. Performance",id:"data-freshness-vs-performance",children:[]},{value:"Search User Experience",id:"search-user-experience",children:[]}]},{value:"Feature Expansions",id:"feature-expansions",children:[]},{value:"Technical Improvements",id:"technical-improvements",children:[]},{value:"UI Enhancements",id:"ui-enhancements",children:[]}],c={toc:o},p="wrapper";function d(e){let{components:n,...a}=e;return(0,i.yg)(p,(0,t.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"challenges--solutions"},"Challenges & Solutions"),(0,i.yg)("h2",{id:"ui-components--design-decisions"},"UI Components & Design Decisions"),(0,i.yg)("h3",{id:"component-structure"},"Component Structure"),(0,i.yg)("p",null,"Given the tight timeline, I opted for a focused component hierarchy:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"CryptoDashboard")," as the main container component"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"CryptoCard")," as a reusable presentation component"),(0,i.yg)("li",{parentName:"ul"},"Modular UI components from shadcn/UI to maintain consistency")),(0,i.yg)("p",null,"This approach let me rapidly build the interface while maintaining clean separation of concerns."),(0,i.yg)("h3",{id:"responsive-design-and-mobile-support"},"Responsive Design and Mobile Support"),(0,i.yg)("p",null,"With limited time, I implemented responsive design through:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Flexbox layouts that adjust between column and row based on screen size"),(0,i.yg)("li",{parentName:"ul"},"Tailwind's responsive modifiers (",(0,i.yg)("inlineCode",{parentName:"li"},"sm:"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"lg:"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"xl:"),") for breakpoint handling"),(0,i.yg)("li",{parentName:"ul"},"Grid-based card layout that reflows from 1 to 5 columns as screen size increases or decreases"),(0,i.yg)("li",{parentName:"ul"},"Mobile optimizations for search and controls")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'<div className="flex flex-col sm:flex-row justify-between items-center mb-8">\n    <div className="flex items-center gap-2">\n        <h1 className="text-3xl font-bold mb-4 sm:mb-0">\n            Crypto Price Tracker\n        </h1>\n    </div>\n\n    <div className="flex flex-col sm:flex-row w-full sm:w-auto gap-2">\n        {/* Search and controls */}\n    </div>\n</div>\n\n<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6">\n    {filteredCryptos.slice(0, itemsToDisplay).map((crypto) => (\n        <CryptoCard key={crypto.id} crypto={crypto} />\n    ))}\n</div>\n')),(0,i.yg)("h3",{id:"theme-support"},"Theme Support"),(0,i.yg)("p",null,"I implemented a dark/light mode toggle that:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Uses system preferences as the default"),(0,i.yg)("li",{parentName:"ul"},"Allows user override via a simple toggle button"),(0,i.yg)("li",{parentName:"ul"},"Integrates with shadcn/UI's theming approach")),(0,i.yg)("h3",{id:"performance-considerations"},"Performance Considerations"),(0,i.yg)("h4",{id:"data-management"},"Data Management"),(0,i.yg)("p",null,"To maintain performance with limited development time:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Implemented client-side filtering for search to prevent API request overhead"),(0,i.yg)("li",{parentName:"ul"},"Created a paginated display with user-configurable items per page"),(0,i.yg)("li",{parentName:"ul"},"Added visual feedback during loading states")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"// Client-side filtering implementation\nconst filteredCryptos = cryptocurrencies.filter(\n  (crypto) =>\n    crypto.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    crypto.symbol.toLowerCase().includes(searchTerm.toLowerCase())\n);\n\n// Display only the number of items the user has selected\n{filteredCryptos.slice(0, itemsToDisplay).map((crypto) => (\n  <CryptoCard key={crypto.id} crypto={crypto} />\n))}\n")),(0,i.yg)("h4",{id:"state-caching"},"State Caching"),(0,i.yg)("p",null,"I implemented a practical caching strategy to reduce API calls:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Historical data is cached by cryptocurrency ID in the Zustand store"),(0,i.yg)("li",{parentName:"ul"},"The app checks the cache before making new requests")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"// From useCryptoStore.ts\nselectCrypto: (id) => {\n  set({ selectedCryptoId: id, isModalOpen: true });\n\n  // Load historical data if we don't have it cached\n  const state = get();\n  if (!state.historicalData[id]) {\n    state.fetchHistoricalData(id);\n  }\n},\n")),(0,i.yg)("h2",{id:"core-challenges--solutions"},"Core Challenges & Solutions"),(0,i.yg)("h3",{id:"api-rate-limiting"},"API Rate Limiting"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Challenge:")," CoinGecko's free tier has a 30 requests/minute limit, which could easily be exceeded with real-time updates. CoinGecko also updates only every 1-2 minutes, so real-time updates are unnecessary."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Solution:")," I implemented a multi-faceted approach:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"60-second polling interval as a baseline update frequency"),(0,i.yg)("li",{parentName:"ul"},"Manual refresh button for users who want immediate updates"),(0,i.yg)("li",{parentName:"ul"},"Client-side filtering to avoid API calls while searching"),(0,i.yg)("li",{parentName:"ul"},"Caching of historical data to prevent redundant requests")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useEffect(() => {\n  fetchCryptocurrencies();\n  setLastRefreshed(new Date());\n\n  // Set up a refresh interval every 60 seconds\n  const intervalId = setInterval(() => {\n    fetchCryptocurrencies();\n    setLastRefreshed(new Date());\n  }, 60000);\n\n  // Clean up interval on component unmount\n  return () => clearInterval(intervalId);\n}, [fetchCryptocurrencies]);\n")),(0,i.yg)("h3",{id:"data-freshness-vs-performance"},"Data Freshness vs. Performance"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Challenge:")," Balancing the need for fresh cryptocurrency data with application performance."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Solution:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Implemented a configurable display limit (5/10/15/20 items) to reduce rendering load"),(0,i.yg)("li",{parentName:"ul"},"Added timestamp display showing when data was last refreshed"),(0,i.yg)("li",{parentName:"ul"},"Created visual loading states to maintain UI responsiveness during updates")),(0,i.yg)("h3",{id:"search-user-experience"},"Search User Experience"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Challenge:")," Creating a responsive search experience without overwhelming the API."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Solution:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Implemented immediate client-side filtering against already fetched cryptocurrencies"),(0,i.yg)("li",{parentName:"ul"},"Added a clear button to quickly reset searches"),(0,i.yg)("li",{parentName:"ul"},"Displayed helpful feedback when no results match the search term")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'{filteredCryptos.length === 0 && !isLoading && (\n  <div className="text-center py-12">\n    <p className="text-gray-500 dark:text-gray-400">\n      No cryptocurrencies found matching &quot;{searchTerm}&quot;\n    </p>\n  </div>\n)}\n')),(0,i.yg)("h2",{id:"feature-expansions"},"Feature Expansions"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Portfolio tracking with saved cryptocurrencies"),(0,i.yg)("li",{parentName:"ul"},"Price alerts and notifications"),(0,i.yg)("li",{parentName:"ul"},"More detailed historical charts with timeframe options"),(0,i.yg)("li",{parentName:"ul"},"Additional data points (volume, circulating supply, etc.)")),(0,i.yg)("h2",{id:"technical-improvements"},"Technical Improvements"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Server-side filtering and pagination"),(0,i.yg)("li",{parentName:"ul"},"WebSocket integration for true real-time updates"),(0,i.yg)("li",{parentName:"ul"},"Progressive Web App capabilities for offline support"),(0,i.yg)("li",{parentName:"ul"},"More extensive error recovery strategies")),(0,i.yg)("h2",{id:"ui-enhancements"},"UI Enhancements"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"More detailed crypto information cards"),(0,i.yg)("li",{parentName:"ul"},"Interactive charts with zoom capabilities"),(0,i.yg)("li",{parentName:"ul"},"Customizable dashboard layouts"),(0,i.yg)("li",{parentName:"ul"},"Animation and transition improvements")))}d.isMDXComponent=!0}}]);