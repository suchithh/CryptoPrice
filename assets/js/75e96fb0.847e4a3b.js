"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[399],{6022:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(8168),i=(a(6540),a(5680));const o={id:"technology",title:"Technology Stack",sidebar_position:2},r="Technology Stack",l={unversionedId:"technology",id:"technology",isDocsHomePage:!1,title:"Technology Stack",description:"My Approach",source:"@site/docs/technology.md",sourceDirName:".",slug:"/technology",permalink:"/CryptoPrice/docs/technology",editUrl:"https://github.com/suchithh/CryptoPrice/docs/technology.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"technology",title:"Technology Stack",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/CryptoPrice/docs/getting-started"},next:{title:"Challenges & Solutions",permalink:"/CryptoPrice/docs/challenges"}},s=[{value:"My Approach",id:"my-approach",children:[]},{value:"Tech Stack Overview",id:"tech-stack-overview",children:[{value:"Next.js",id:"nextjs",children:[]},{value:"Tailwind CSS",id:"tailwind-css",children:[]},{value:"Zustand",id:"zustand",children:[]},{value:"Axios",id:"axios",children:[]},{value:"API Integration",id:"api-integration",children:[]},{value:"Data Fetching Approach",id:"data-fetching-approach",children:[]},{value:"Rate Limiting Strategy",id:"rate-limiting-strategy",children:[]},{value:"State Management Implementation",id:"state-management-implementation",children:[]},{value:"Why Not Other Options?",id:"why-not-other-options",children:[]}]}],c={toc:s},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.yg)(p,(0,n.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"technology-stack"},"Technology Stack"),(0,i.yg)("h2",{id:"my-approach"},"My Approach"),(0,i.yg)("p",null,"With only a few hours to complete this project, I had to make quick but effective technology choices. I focused on solutions that would allow me to build a functional, responsive cryptocurrency tracker without getting bogged down in configuration or boilerplate."),(0,i.yg)("h2",{id:"tech-stack-overview"},"Tech Stack Overview"),(0,i.yg)("h3",{id:"nextjs"},"Next.js"),(0,i.yg)("p",null,"I chose Next.js as my React framework because:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"I needed server-side rendering capabilities to improve initial load times"),(0,i.yg)("li",{parentName:"ul"},"Its file based routing system saved me significant development time"),(0,i.yg)("li",{parentName:"ul"},"Quick setup with ",(0,i.yg)("inlineCode",{parentName:"li"},"create-next-app")," and built-in TypeScript support")),(0,i.yg)("p",null,"Next.js allowed me to get a production-ready application up and running quickly without sacrificing performance."),(0,i.yg)("h3",{id:"tailwind-css"},"Tailwind CSS"),(0,i.yg)("p",null,"For styling, I went with Tailwind CSS because:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Its utility-first approach meant I could style components inline without context switching"),(0,i.yg)("li",{parentName:"ul"},"It eliminated the need to write and maintain custom CSS files"),(0,i.yg)("li",{parentName:"ul"},"The design system constraints helped maintain visual consistency despite rapid development")),(0,i.yg)("p",null,"The combination with shadcn/UI components (as seen in my CryptoDashboard component) gave me a polished look with minimal effort."),(0,i.yg)("h3",{id:"zustand"},"Zustand"),(0,i.yg)("p",null,"For state management, I selected Zustand over other options because:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"// Snapshot of my Zustand store setup\nexport const useCryptoStore = create<CryptoState>((set, get) => ({\n    cryptocurrencies: [],\n    searchTerm: '',\n    // ...more state\n\n    fetchCryptocurrencies: async () => {\n        set({ isLoading: true, error: null });\n        try {\n            const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {\n                params: { /* ... */ }\n            });\n            set({ cryptocurrencies: response.data, isLoading: false });\n        } catch (error) {\n            set({ error: /* ... */, isLoading: false });\n        }\n    },\n    // ...more actions\n}));\n")),(0,i.yg)("p",null,"I needed a state solution that:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Had minimal boilerplate so I could implement features quickly"),(0,i.yg)("li",{parentName:"ul"},"Didn't require wrapping my app in context providers"),(0,i.yg)("li",{parentName:"ul"},"Made it easy to handle both UI state and API data in one place"),(0,i.yg)("li",{parentName:"ul"},"Let me use selectors to optimize rendering performance")),(0,i.yg)("p",null,"With the tight timeline, Redux would have been overkill, and Context API would have required too much setup for the complexity of state I needed to manage."),(0,i.yg)("h3",{id:"axios"},"Axios"),(0,i.yg)("p",null,"I used Axios for API requests because:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Its concise API made data fetching straightforward"),(0,i.yg)("li",{parentName:"ul"},"I could easily set up request configurations for the CoinGecko API")),(0,i.yg)("h3",{id:"api-integration"},"API Integration"),(0,i.yg)("h4",{id:"coingecko-api"},"CoinGecko API"),(0,i.yg)("p",null,"I integrated with CoinGecko's API for cryptocurrency data because:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"It offered all the data points I needed (prices, market cap, historical data)"),(0,i.yg)("li",{parentName:"ul"},"The free tier had reasonable rate limits for a demonstration project (30 requests/minute)"),(0,i.yg)("li",{parentName:"ul"},"The API is well-documented and reliable")),(0,i.yg)("h3",{id:"data-fetching-approach"},"Data Fetching Approach"),(0,i.yg)("p",null,"With limited development time, I implemented a pragmatic approach to data fetching:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Initial data load when components mount"),(0,i.yg)("li",{parentName:"ul"},"60-second polling interval for fresh data without overwhelming the API"),(0,i.yg)("li",{parentName:"ul"},"Simple caching for historical chart data to prevent redundant requests"),(0,i.yg)("li",{parentName:"ul"},"Client-side filtering for search to provide immediate feedback")),(0,i.yg)("h3",{id:"rate-limiting-strategy"},"Rate Limiting Strategy"),(0,i.yg)("p",null,"To respect API limits while keeping data fresh:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"I implemented simple time-based polling instead of real-time WebSockets"),(0,i.yg)("li",{parentName:"ul"},"Added a manual refresh option for users who want immediate updates"),(0,i.yg)("li",{parentName:"ul"},"Cached historical data by cryptocurrency ID to avoid redundant API calls")),(0,i.yg)("h3",{id:"state-management-implementation"},"State Management Implementation"),(0,i.yg)("h4",{id:"store-design"},"Store Design"),(0,i.yg)("p",null,"I structured my Zustand store to handle:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cryptocurrency data from API responses"),(0,i.yg)("li",{parentName:"ul"},"UI interaction state (search terms, selected cryptos)"),(0,i.yg)("li",{parentName:"ul"},"Loading and error states")),(0,i.yg)("p",null,"This unified approach let me manage all related state in one place while keeping components clean and focused on rendering."),(0,i.yg)("h4",{id:"component-data-flow"},"Component Data Flow"),(0,i.yg)("p",null,"My components only subscribe to the specific pieces of state they need:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"const {\n    cryptocurrencies,\n    searchTerm,\n    isLoading,\n    error,\n    fetchCryptocurrencies,\n    setSearchTerm,\n} = useCryptoStore();\n")),(0,i.yg)("p",null,"This selective state consumption helped prevent unnecessary re-renders and kept the application responsive even while fetching new data."),(0,i.yg)("h3",{id:"why-not-other-options"},"Why Not Other Options?"),(0,i.yg)("p",null,"Given my time constraints:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"React Query would have been great for data fetching, but I needed a solution that handled UI state too"),(0,i.yg)("li",{parentName:"ul"},"Redux would have required too much boilerplate for a quick project"),(0,i.yg)("li",{parentName:"ul"},"Context API alone would have been verbose for the state complexity I needed")),(0,i.yg)("p",null,"Zustand gave me the perfect balance of simplicity and power for a fast-paced project."))}d.isMDXComponent=!0}}]);